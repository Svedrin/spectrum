#!/usr/bin/python -Wignore::DeprecationWarning
# -*- coding: utf-8 -*-
#
# Wildcard-plugin to monitor spectrum transport usage through an XMPP-connection
# sending Statistics Gathering (XEP-0039 [1]) packets. Depending on the suffix,
# the plugin monitors one specific characteristic of one or more spectrum
# instances.
#
# Note that as of now, spectrum doesn't correctly report every value that this
# plugin is able to monitor.
#
# Current suffixes are:
#     spectrum_uptime (monitor uptime of transports)
#     spectrum_registered (how many users are registered to the transport)
#     spectrum_online (how many users are online)
#     spectrum_legacy_registered
#     spectrum_legacy_online (same as above, only for the legacy network)
#     spectrum_messages (how many messages have been sent over this transport
#     spectrum_memory (how much memory the transport consumes)
#
# Configuration:
#     The plugin uses the environment variable "jids" to configure which
#     transports to monitor. Since this plugin uses an XMPP-connection, you
#     also have to specify credentials: Simply configure the plugin like this:
#     
#     [spectrum_*]
#     env.jids gg.fsinf.at aim.fsinf.at
#     env.bot somebot@jabber.org
#     env.password some_password
#
# Author:
#     Mathias Ertl <mati@fsinf.at>
# 
# Changelog:
#     1.0: Initial version
#
# [1] http://xmpp.org/extensions/xep-0039.html
#
# Copyright (c) 2009 Mathias Ertl.
#
# Permission to use, copy, and modify this software with or without fee
# is hereby granted, provided that this entire notice is included in
# all source code copies of any software which is or includes a copy or
# modification of this software.
#
# THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
# IMPLIED WARRANTY. IN PARTICULAR, NONE OF THE AUTHORS MAKES ANY
# REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
# MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
# PURPOSE.
#
# Magic markers
#%# family=auto
#%# capabilities=autoconf suggest

import sys
# autoconf and suggest handling:
if len( sys.argv ) > 1:
	if sys.argv[1] == 'autoconf':
		try:
			import xmpp
		except ImportError:
			print( 'no (no xmpp library found)' )
			sys.exit(1)
		print( 'yes' )
		sys.exit( 0 )
	elif sys.argv[1] == 'suggest':
		print( """uptime
registered
online
legacy_registered
legacy_online
messages
memory""" )
		sys.exit(0)

import os, xmpp, time, hashlib, re
from threading import Thread, Lock, Timer

# filter forbidden characters for munin fieldnames
def handle_field( string ):
	for regexp in [ '^[^A-Za-z_]', '[^A-Za-z0-9_]' ]:
		string = re.compile( regexp ).sub( '_', string )
	return string[0:18]

# get runtime variables
jid = xmpp.JID( os.environ.get( 'bot' ) )
password = os.environ.get( 'password' )
resource = hashlib.md5( str(time.time()) ).hexdigest()
stat = sys.argv[0].rpartition('_')[2]
jids = os.environ.get( 'jids' ).split()

# connect
conn = xmpp.Client( jid.getDomain(), debug = [] )
conn.connect()
conn.auth( jid.getNode(), password, resource )
suffixes = None # used for plugins that monitor multiple values
transformer = None # function used to transform values (i.e. seconds to days)
ns = 'http://jabber.org/protocol/stats'
plock = Lock()

# set variables based on wildcard 
if stat == 'uptime':
	stat = [ 'uptime' ]
	title = "Uptime"
	vlabel = "days"
	def uptime_transformer( value ):
		value = float( value )
		return value / 60.0 / 60.0 /24.0
	transformer = uptime_transformer

elif stat == 'registered':
	stat = [ 'users/registered' ]
	title = "Registered users"
	vlabel = "users"
elif stat == 'online':
	stat = [ 'users/online' ]
	title = "Online users"
	vlabel = "users"
elif stat == 'legacy_registered':
	stat = [ 'legacy-network-users/registered' ]
	title = "Users registered to legacy network"
	vlabel = "users"
elif stat == 'legacy_online':
	stat = [ 'legacy-network-users/online' ]
	title = "Users online on legacy network"
	vlabel = "users"
elif stat == 'messages':
	stat = [ 'messages/in', 'messages/out' ]
	suffixes = [ 'in', 'out' ]
	title = "Messages send over transport"
	vlabel = "Messages"
elif stat == 'memory':
	stat = [ 'memory-usage' ]
	title = "Memory usage of transports"
	vlabel = "megabytes"
	def memory_transformer( value ):
		value = float( value )
		return value / 1024.0
	transformer = memory_transformer

# handle config
if len( sys.argv ) > 1 and  sys.argv[1] == 'config':
	print( """graph_title %s
graph_args --base 1000 -l 0
graph_scale no
graph_vlabel %s
graph_category transports""" %(title, vlabel) )
	for jid in jids:
		for i in range(0, len(stat)):
			line = stat[i]
			label = jid
			if suffixes:
				label += ' ' + suffixes[i]
			fieldname = handle_field( label )
			print( '%s.label %s' %(fieldname, label) )
		if len(stat) > 1:
			label = jid + ' total'
			fieldname = handle_field( label )
			print( '%s.label %s' %(fieldname, label) )
	sys.exit(0)

# callback to handle incoming packets
def handler_fetch( c, packet ):
	frm = packet.getFrom()
	jid = str(packet.getFrom() )
	jids.remove( jid )
	total = None
	for child in packet.getChildren()[0].getChildren():
		if child.getAttr( 'name' ) in stat:
			label = jid
			value = child.getAttr( 'value' )
			if len( stat ) > 1:
				i = stat.index( child.getAttr( 'name' ) )
				suffix = suffixes[i]
				label += ' ' + suffix
				if total == None:
					total = int( value )
				else:
					total += int( value )
				
			fieldname = handle_field( label )
			
			if transformer:
				value = apply( transformer, [ value ] )

			plock.acquire()
			print( '%s.value %s' %(fieldname, value) )
			plock.release()

	if total != None:
		label = jid + " total"
		fieldname = handle_field( label )
		if transformer:
			total = apply( transformer, [ total ] )
		plock.acquire()
		print( '%s.value %s' %(fieldname, total) )
		plock.release()

# send packets
conn.RegisterHandler( 'iq', handler_fetch, typ='result', ns=ns )
for jid in jids:
	pkg = xmpp.Iq( typ='get', queryNS=ns, to=jid )
	query = pkg.getChildren()[0]
	for s in stat:
		query.addChild( name='stat', attrs={ 'name': s } )
	conn.send( pkg )

def timeout():
	sys.stdout.flush()
	os._exit( 0 )

t = Timer( 5.0, timeout )
t.start()

def StepOn():
	if len( jids ) == 0:
		sys.stdout.flush()
		os._exit( 0 )

	try:
		conn.Process(1)
	except KeyboardInterrupt: 
		return False

	return True

def GoOn():
	while StepOn(): pass

GoOn()
