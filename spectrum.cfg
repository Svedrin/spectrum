################################################################################
### This is an EXAMPLE config-file and will NOT work out of the box. Simply  ###
### copy it to e.g.                                                          ###
###     /etc/spectrum/icq.cfg                                                ###
### and fill in the details for the transport. For more help, please visit   ###
###     http://spectrum.im/projects/spectrum/wiki/Configuring_Spectrum       ###
### and/or read the spectrum.cfg (5) man page.                               ###
################################################################################

[service]
# enable this spectrum instance
enable=1

# one of: aim, facebook, gg, icq, irc, msn, myspace, qq, simple, xmpp, yahoo
protocol=icq

# component ip
server=127.0.0.1

# if use_proxy is 1, the http_proxy env var will be used as the proxy server
# for example export http_proxy="http://user:passwd@your.proxy.server:port/"
use_proxy=0

# component JID
jid=$protocol.example.com

# component secret
password=secret

# component port
port=5347

config_interface = /var/run/spectrum/$jid.sock

# IP:port where filetransfer proxy binds to. This has to be public IP.
#filetransfer_bind_address=192.0.2.1:12345

# IP:port which will be sent in filetransfer request as stream host.
#filetransfer_public_address=192.0.2.1:12345

# admin JIDs - Jabber IDs of transport administrators who have access to admin adhoc commands
# separated by semicolons
#admins=admin@example.com;foo@bar.cz

# directory where downloaded files will be saved
filetransfer_cache=/var/lib/spectrum/filetransfer_cache

# URL used to acces filestransfer_cache directory from the web.
filetransfer_web=http://example.com/files/

# name of transport (this will appear in service discovery)
name=My ICQ Transport

# default language
language=en

# transport features separated by semicolons
# combination of: avatars, chatstate, filetransfer
# if commented, all features will be used
# This variable is DEPRECATED and will be removed in future versions. Use [features] instead.
#transport_features = avatars;chatstate;filetransfer

# if vip_mode is 1, users are divided to 2 groups according to 'vip' database field
vip_mode=0

# if vip_mode is 1, you can set transport to be availabe only for VIP users by setting only_for_vip to 1.
only_for_vip=0

# if vip_mode is 1 and only_for_vip is 1, users can connect from these servers even they are not VIP.
# This feature is useful, if you want to enable transport only for users from your server, but also want
# to give access to VIP users from other servers (for example from GTalk)
# seperated by semicolons
#allowed_servers=localhost

# transport features separated by semicolons which will be used for VIP users.
# combination of: avatars, chatstate, filetransfer
# if commented, all features will be used
# This variable is DEPRECATED and will be removed in future versions.  Use [vip-features] instead.
#vip_features = avatars;chatstate;filetransfer

# pid file
pid_file=/var/run/spectrum/$jid.pid

# require_tls to connect legacy network
#require_tls=false

[registration]
# Set to 0 to disable transport registration to everyone except
# people from host from allowed_servers list.
#enable_public_registration=1

# You can override username registered by transport user. This is useful
# for example if you want to let users to register only their Facebook name
# and internally connect them to facebook_name@chat.facebook.com.
# $username variable is replaced by username which has been registered
# by particular user. 
#username_mask = $username@chat.facebook.com

# Label used to described username field in registration form
#username_label = Facebook username

# This variable overrides default instructions text in registration form.
#instructions = Type your Facebook name here:

# Transport features, all features are enabled by default.
[features]
#filetransfer=1
#avatars=1
#chatstates=1

# Transport features for VIP users, all features are enabled by default.
[vip-features]
#filetransfer=1
#avatars=1
#chatstates=1

[logging]
# log file, needs to be unique for each spectrum instance
log_file=/var/log/spectrum/$jid.log

# log areas
# combination of: xml, purple
log_areas=xml;purple

[database]
# mysql or sqlite
type=sqlite

# hostname (not needed for sqlite)
#host=localhost

# username (not needed for sqlite)
#user=user

# password (not needed for sqlite)
#password=password
# sqlite: set path to database file here
# mysql: set to name of database
database=/var/lib/spectrum/$jid/database.sqlite
# table prefix for multiple transport instances sharing the same database
#prefix=icq_

# enable AES256 encryption for passwords in mysql and sqlite db.
# WARNING: Passwords are still easily decryptable with use of encryptionKeyFile,
# but they are stored encrypted in database.
# default is disabled (0)
# database needs to be updated to version 3/4 (mysql/sqlite)
#encryption=1

# specify keyfile used for encryption. This file will not be
# created automatically and should *NOT* be world-readable and
# by the spectrum user (usually "spectrum").
# On Debian/Ubuntu for example run:
# makepasswd --char=24 > "/etc/spectrum/keyfile"
# chmod 600 /etc/spectrum/keyfile
# chown spectrum /etc/spectrum/keyfile
# WARNING: If you modify or delete this file without decrypting
# the database all passwords are lost!
#encryptionKeyFile="/etc/spectrum/keyfile"

[purple]
# avatar, vcard, roster storage
# needs to be unique for each spectrum instance
userdir=/var/lib/spectrum/$jid/userdir
